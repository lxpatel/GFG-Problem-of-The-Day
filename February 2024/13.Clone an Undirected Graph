
// Clone an Undirected Graph
// February 13, 2024
// C++ Code

class Solution {
private : 
   unordered_map<Node*,Node*> visited;
   Node* BFs(Node* node)
   {
        queue<Node*> q;
        q.push(node);
        visited[node] = new Node(node->val);
        while(!q.empty())
        {
            Node* currNode = q.front();
            q.pop();
            for(auto adjNode : currNode->neighbors)
            {  
                if(visited[adjNode] == nullptr)
                {
                    visited[adjNode] = new Node(adjNode->val);
                    q.push(adjNode);
                }
                visited[currNode]->neighbors.push_back(visited[adjNode]);
            }
        }
        return visited[node];
   }
   Node* DFs(Node* node)
   {
       visited[node] = new Node(node->val);
       for(auto adjNode : node->neighbors)
       {
           if(visited[adjNode] == nullptr)
              DFs(adjNode);
           visited[node]->neighbors.push_back(visited[adjNode]);
       }
       return visited[node];
   }
public:
    Node* cloneGraph(Node* node) {
        return DFs(node);
    }
};
